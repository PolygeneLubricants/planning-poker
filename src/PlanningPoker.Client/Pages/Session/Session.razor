@page "/server/{id}"
@using Microsoft.AspNetCore.SignalR.Client
@using PlanningPoker.Client.Storage
@using PlanningPoker.Hub.Client
@using PlanningPoker.Hub.Client.Abstractions
@using PlanningPoker.Hub.Client.Abstractions.ViewModels
@inject NavigationManager NavigationManager
@inject IServerSessionManager sessionManager

@if (CurrentServer != null && _currentPlayer != null)
{
    <_sessionControlComponent @bind-Id="_parsedId" @bind-Session="CurrentServer.CurrentSession" @bind-CurrentPlayer="_currentPlayer" @bind-HubClient="_hubClient" />
    <_sessionRenderingComponent @bind-Id="_parsedId" @bind-Server="CurrentServer" @bind-CurrentPlayer="_currentPlayer" @bind-HubClient="_hubClient" />
    <_sessionLogComponent @bind-HubClient="_hubClient" />
}

@if (_currentPlayer == null && _serverExists)
{
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <p>
                        Pick a username, and begin planning!
                    </p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <form onsubmit="return false">
                        <div class="form-group">
                            <label>
                                Username
                                <input @bind-value="_username"
                                       @bind-value:event="oninput"
                                       size="20"
                                       class="form-control"
                                       maxlength="20"/>
                            </label>
                        </div>
                        <div class="form-group">
                            <label>
                                Participation type
                                <select @bind="@_type"
                                        class="custom-select">
                                    <option value="@PlayerType.Participant">Participant</option>
                                    <option value="@PlayerType.Observer">Observer</option>
                                </select>
                            </label>
                        </div>
                        <div class="form-group">
                            <button @onclick="Join" disabled="@(string.IsNullOrWhiteSpace(_username))" class="btn btn-primary" type="submit">Join</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@if (!_serverExists)
{
    <ServerDoesNotExist @bind-Id="_id" />
}

<_notificationsComponent  @bind-HubClient="_hubClient" />

@code {
    private IPlanningPokerHubClient _hubClient;

    private string? _username;

    private Guid _recoveryId = Guid.NewGuid();

    private PlayerType _type = PlayerType.Participant;

    private PlayerViewModel? _currentPlayer;

    public PokerServerViewModel? CurrentServer { get; set; }

    private string _id;

    [Parameter]
    public string Id
    {
        get => _id;
        set
        {
            _id = value;
            var validId = Guid.TryParse(_id, out var result);
            if (!validId)
            {
                _serverExists = false;
            }

            _parsedId = result;
        }
    }

    private Guid _parsedId;

    private bool _serverExists = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        await ReconnectIfApplicable();
    }

    protected override async Task OnInitializedAsync()
    {
        var connection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/poker"))
            .WithAutomaticReconnect()
            .Build();

        _hubClient = new PlanningPokerHubClient(connection);

        _hubClient.OnSessionUpdated(newServer =>
        {
            CurrentServer = newServer;
            StateHasChanged();
        });

        _hubClient.OnPlayerKicked(kickedPlayer =>
        {
            if (kickedPlayer.PublicId != _currentPlayer.PublicId) return;

            sessionManager.RemoveSession(Id);
            CurrentServer = null;
            _currentPlayer = null;
            StateHasChanged();
        });

        _hubClient.OnClosed(async (error) =>
        {
            await ReconnectIfApplicable();
        });

        _hubClient.OnReconnected(async (newConnectionId) =>
        {
            if (_currentPlayer == null)
            {
                return;
            }

            await ReconnectIfApplicable();
            StateHasChanged();
        });

        await connection.StartAsync();
        await VerifyServerExists();
    }

    async Task VerifyServerExists()
    {
        _serverExists = await _hubClient.Exists(_parsedId);
    }

    async Task ReconnectIfApplicable()
    {
        // Try get session from session storage, to see if the user should simply reconnect.
        var sessionExists = sessionManager.TryGetSession(Id, out var savedSession);
        if (sessionExists)
        {
            _username = savedSession.Username;
            _type = savedSession.Type;
            _recoveryId = savedSession.RecoveryId;
            await Join();
            StateHasChanged();
        }
    }

    async Task Join()
    {
        await _hubClient.Connect(_parsedId);
        _currentPlayer = await _hubClient.JoinServer(_parsedId, _recoveryId, _username, _type);
        var serverSession = new ServerSession
        {
            ServerId = _parsedId,
            Username = _username,
            RecoveryId = _recoveryId,
            Type = _type
        };

        sessionManager.SetSession(serverSession);
    }

    public bool HasJoined = false;
}