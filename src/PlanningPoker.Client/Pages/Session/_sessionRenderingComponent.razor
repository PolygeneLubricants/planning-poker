@using PlanningPoker.Hub.Client.Abstractions
@using PlanningPoker.Hub.Client.Abstractions.ViewModels

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Participants</h5>
        <div class="row">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th></th>
                        <th>Name</th>
                        <th>Vote</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var player in Server?.Players?.Where(p => p.Type == PlayerType.Participant).OrderBy(p => p.PublicId) ?? Enumerable.Empty<PlayerViewModel>())
                {
                    var hasVoted = Server?.CurrentSession?.Votes?.ContainsKey(player.PublicId.ToString()) ?? false;
                    var isAsleep = player.Mode == PlayerMode.Asleep;
                    var currentPlayerVote = hasVoted ? Server.CurrentSession.Votes[player.PublicId.ToString()] : string.Empty;
                    <tr class="@(hasVoted ? "table-success" : "") @(isAsleep ? "asleep" : "")">
                        <td>
                            @if (hasVoted && !isAsleep)
                            {
                                <span class="oi oi-check"></span>
                            }
                            @if (isAsleep)
                            {
                                <span class="oi oi-moon"></span>
                            }
                        </td>
                        <td>
                            @player.Name
                        </td>
                        <td>
                            @currentPlayerVote
                        </td>
                        <td>
                            @if (CurrentPlayer.PublicId == player.PublicId)
                            {
                                <button class="changetype-btn btn float-right" @onclick="() => ChangeType(PlayerType.Observer)" disabled="@PlayerHasVoted()">
                                    <span class="changetype-icon oi oi-loop"></span>
                                </button>
                            }
                        </td>
                        <td>
                            <button class="kick-btn btn float-right" @onclick="() => Kick(player.PublicId)">
                                <span class="kick-icon oi oi-x"></span>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Observers</h5>
        <div class="row">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var player in Server?.Players?.Where(p => p.Type == PlayerType.Observer).OrderBy(p => p.PublicId) ?? Enumerable.Empty<PlayerViewModel>())
                {
                    var isAsleep = player.Mode == PlayerMode.Asleep;
                    <tr class="@(isAsleep ? "asleep" : "")">
                        <td>
                            @player.Name
                        </td>
                        <td>
                            @if (CurrentPlayer.PublicId == player.PublicId)
                            {
                                <button class="changetype-btn btn float-right" @onclick="() => ChangeType(PlayerType.Participant)" disabled="@PlayerHasVoted()">
                                    <span class="changetype-icon oi oi-loop"></span>
                                </button>
                            }
                        </td>
                        <td>
                            <button class="kick-btn btn float-right" @onclick="() => Kick(player.PublicId)">
                                <span class="kick-icon oi oi-x"></span>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public EventCallback<Guid> IdChanged { get; set; }

    [Parameter]
    public IPlanningPokerHubClient HubClient { get; set; }

    [Parameter]
    public EventCallback<IPlanningPokerHubClient> HubClientChanged { get; set; }

    [Parameter]
    public PlayerViewModel CurrentPlayer { get; set; }

    [Parameter]
    public EventCallback<PlayerViewModel> CurrentPlayerChanged { get; set; }

    [Parameter]
    public PokerServerViewModel Server { get; set; }

    [Parameter]
    public EventCallback<PokerServerViewModel> ServerChanged { get; set; }

    Task Kick(int playerPublicId)
    {
        return HubClient.KickPlayer(Id, CurrentPlayer.Id, playerPublicId);
    }

    async Task ChangeType(PlayerType newType)
    {
        var updatedPlayer = await HubClient.ChangePlayerType(Id, newType);
        await CurrentPlayerChanged.InvokeAsync(updatedPlayer);
    }

    bool PlayerHasVoted()
    {
        return Server.CurrentSession.Votes.Any(v => v.Key == CurrentPlayer.PublicId.ToString());
    }
}