@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Options
@using PlanningPoker.Client.Configuration
@using PlanningPoker.Client.Utilities
@using PlanningPoker.Hub.Client
@using PlanningPoker.Hub.Client.Abstractions
@using PlanningPoker.Hub.Client.Abstractions.ViewModels
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IOptions<NextEnvironmentConfiguration> NextEnvironmentConfiguration

@if (string.IsNullOrWhiteSpace(CreatedServerAddress))
{
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-12">
                    <h2>Welcome to Just Planning Poker!</h2> 
                    <p>This is just a planning poker tool. No sign-up, no gathered user data, no fees.</p>
                    <p>The planning room has a default set of cards, but you can modify this set in the input below. Separate card values with ',' (comma).</p>
                    <div class="form-group">
                        <label>
                            Card set
                            <input @bind-value="_cardSet"
                                   @bind-value:event="oninput"
                                   size="200"
                                   class="form-control" />
                        </label>
                        @if (_creationResult != null && !string.IsNullOrWhiteSpace(_creationResult.ValidationMessage))
                        {
                            <small class="text-danger">
                                @_creationResult.ValidationMessage
                            </small>
                        }
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <p>Press below to create a room for you. This will create a link, where you and your participants can create a user and start voting.</p>
                    <p>Happy planning!</p>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <button @onclick="Create" disabled="@(HasCreated)" class="btn btn-primary">Create room</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (NextEnvironmentConfiguration?.Value != null && !string.IsNullOrWhiteSpace(NextEnvironmentConfiguration.Value.RichText))
    {
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col">
                        <p>@((MarkupString)NextEnvironmentConfiguration.Value.RichText)</p>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <p>Your room has been created. Click to join!</p>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <a href="@CreatedServerAddress" class="btn btn-primary">Join room</a>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <p>Below is the link to your room. Send this to your participants, and start planning!</p>
                    <div class="input-group mb-3">
                        <input class="form-control" value="@CreatedServerAddress" disabled="disabled" />
                        <div class="input-group-append">
                            <button @onclick="CopyToClipboard" class="btn btn-outline-secondary" type="button" id="button-addon2">Copy</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

@code {
    private IPlanningPokerHubClient _hubClient;

    private string _cardSet;

    private ServerCreationResult _creationResult;

    protected override async Task OnInitializedAsync()
    {
        _cardSet = string.Join(",", Cards.DefaultCardSet);
        var connection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/poker"))
            .WithAutomaticReconnect()
            .Build();
        await connection.StartAsync();
        _hubClient = new PlanningPokerHubClient(connection);
    }

    async Task Create()
    {
        var creationResult = await _hubClient.CreateServer(_cardSet);
        _creationResult = creationResult;
        if (_creationResult.Created)
        {
            var uri = NavigationManager.ToAbsoluteUri($"/server/{_creationResult.ServerId}");
            CreatedServerAddress = uri.AbsoluteUri;
            HasCreated = true;
        }

        StateHasChanged();
    }

    async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", CreatedServerAddress);
    }

    public string? CreatedServerAddress { get; set; }

    public bool HasCreated = false;
}